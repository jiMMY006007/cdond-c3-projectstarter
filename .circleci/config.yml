version: 2.1
orbs:
  #node: 'circleci/node:4.1'
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
            keys: [backend-build]

      - attach_workspace:
          at: ~/      
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(cat ~/project/backend/result.txt)
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi      

  empty-s3bucket:
    description: Empty an S3 bucket to allow for its deletion.
    steps:
      - run:
          name: Empty s3 bucket.
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1    

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1  

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
    
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides  ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install -y tar gzip
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.10.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["92:1f:f7:b8:87:b3:bf:8d:35:12:d2:1c:49:4a:e3:9e"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip3 install ansible
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

          no_output_timeout: 30m

      - destroy-environment 

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration result
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                echo 1 > ~/project/backend/result.txt
                
            else
                echo 0 > ~/project/backend/result.txt
            fi
            cat ~/project/backend/result.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/result.txt
      
      - run: 
          name: install pip3 and awscli
          when: on_fail
          command: |
              sudo apt -y update
              sudo apt install -yy python3-pip
              pip3 install --upgrade pip
              pip3 install awscli

      - destroy-environment     
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update 
            sudo apt install -yy python3-pip
            pip3 install --upgrade pip
            pip3 install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - empty-s3bucket
      - destroy-environment    
                    
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["92:1f:f7:b8:87:b3:bf:8d:35:12:d2:1c:49:4a:e3:9e"]

      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            sudo apt install -yy python3-pip
            sudo apt install -y tar gzip
            pip3 install --upgrade pip
            pip3 install ansible
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz  .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - empty-s3bucket
      - destroy-environment 

  smoke-test:
    docker:
      - image: cimg/node:13.8.0 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            sudo apt install -yy python3-pip
            sudo apt install -y tar gzip
            pip3 install --upgrade pip
            pip3 install awscli
            
      - run:
          name: Backend smoke test.
          command: |
            # Get backend url
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi

      - empty-s3bucket
      - destroy-environment
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            sudo apt install -yy python3-pip
            sudo apt install -y tar gzip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - empty-s3bucket
      - destroy-environment
      - revert-migrations    

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # Fetch the Old workflow ID
                export OldWorkflowID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text)
                echo OldWorkflowID: "${OldWorkflowID}"
                echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                # Fetch the stack names          
                export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                echo Stack names: "${STACKS[@]}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
            

workflows:
  deploy_and_notify:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-backend, scan-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]